/*
 * Copyright (c) 2023, Daniel Tabor
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef __UTF8_H__
#define __UTF8_H__

#include <stdint.h>


#ifndef UTF8_IMPLEMENTATION
	#if defined(UTF8_EXT_CHARACTER_SETS)
		extern uint32_t cp437[256];
		extern uint32_t petscii[512];
		extern uint32_t trs80[192];
	#elif defined(UTF8_DOS_CHARACTER_SET)
			extern uint16_t cp437[256];
	#endif
#endif

char* utf8_encode(char* dst, uint32_t character);

#endif //__UTF8_H__

#ifdef UTF8_IMPLEMENTATION

#if defined(UTF8_EXT_CHARACTER_SETS)
	uint32_t cp437[256] = {
#elif defined(UTF8_DOS_CHARACTER_SET)
	uint16_t cp437[256] = {
#endif
#if defined(UTF8_EXT_CHARACTER_SETS) || defined(UTF8_DOS_CHARACTER_SET)
	0x0000,0x263A,0x263B,0x2665,0x2666,0x2663,0x2660,0x2022,0x25D8,0x25CB,0x25D9,0x2642,0x2640,0x266A,0x266B,0x263C,
	0x25BA,0x25C4,0x2195,0x203C,0x00B6,0x00A7,0x25AC,0x21A8,0x2191,0x2193,0x2192,0x2190,0x221F,0x2194,0x25B2,0x25BC,
	0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F,
	0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F,
	0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F,
	0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F,
	0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F,
	0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x2302,
	0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x00EC,0x00C4,0x00C5,
	0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00F2,0x00FB,0x00F9,0x00FF,0x00D6,0x00DC,0x00A2,0x00A3,0x00A5,0x20A7,0x0192,
	0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x2310,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB,
	0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510,
	0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567,
	0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580,
	0x03B1,0x00DF,0x0393,0x03C0,0x03A3,0x03C3,0x00B5,0x03C4,0x03A6,0x0398,0x03A9,0x03B4,0x221E,0x03C6,0x03B5,0x2229,
	0x2261,0x00B1,0x2265,0x2264,0x2320,0x2321,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0,
};
#endif //UTF8_EXT_CHARACTERSES || UTF8_DOS_CHARACTER_SET

#if defined(UTF8_EXT_CHARACTER_SETS)
uint32_t petscii[512] = {
	//Unshifted
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x00020,0x00021,0x00022,0x00023,0x00024,0x00025,0x00026,0x00027,0x00028,0x00029,0x0002A,0x0002B,0x0002C,0x0002D,0x0002E,0x0002F,
	0x00030,0x00031,0x00032,0x00033,0x00034,0x00035,0x00036,0x00037,0x00038,0x00039,0x0003A,0x0003B,0x0003C,0x0003D,0x0003E,0x0003F,
	0x00040,0x00041,0x00042,0x00043,0x00044,0x00045,0x00046,0x00047,0x00048,0x00049,0x0004A,0x0004B,0x0004C,0x0004D,0x0004E,0x0004F,
	0x00050,0x00051,0x00052,0x00053,0x00054,0x00055,0x00056,0x00057,0x00058,0x00059,0x0005A,0x0005B,0x000A3,0x0005D,0x02191,0x02190,
	0x1FB79,0x02660,0x1FB72,0x1FB78,0x1FB77,0x1FB76,0x1FB7A,0x1FB71,0x1FB74,0x0256E,0x02570,0x0256F,0x1FB7C,0x02572,0x02571,0x1FB7D,
	0x1FB7E,0x025CF,0x1FB7B,0x02665,0x1FB70,0x0256D,0x02573,0x025CB,0x02663,0x1FB75,0x02666,0x0253C,0x1FB8C,0x02502,0x003C0,0x025E5,
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x000A0,0x0258C,0x02584,0x02594,0x02581,0x0258F,0x02592,0x02595,0x1FB8F,0x025E4,0x1FB87,0x0251C,0x02597,0x02514,0x02510,0x02582,
	0x0250C,0x02534,0x0252C,0x02524,0x0258E,0x0258D,0x1FB88,0x1FB82,0x1FB83,0x02583,0x1FB7F,0x02596,0x0259D,0x02518,0x02598,0x0269A,
	0x1FB79,0x02660,0x1FB72,0x1FB78,0x1FB77,0x1FB76,0x1FB7A,0x1FB71,0x1FB74,0x0256E,0x02570,0x0256F,0x1FB7C,0x02572,0x02571,0x1FB7D,
	0x1FB7E,0x025CF,0x1FB7B,0x02665,0x1FB70,0x0256D,0x02573,0x025CB,0x02663,0x1FB75,0x02666,0x0253C,0x1FB8C,0x02502,0x003C0,0x025E5,
	0x000A0,0x0258C,0x02584,0x02594,0x02581,0x0258F,0x02592,0x02595,0x1FB8F,0x025E4,0x1FB87,0x0251C,0x02597,0x02514,0x02510,0x02582,
	0x0250C,0x02534,0x0252C,0x02524,0x0258E,0x0258D,0x1FB88,0x1FB82,0x1FB83,0x02583,0x1FB7F,0x02596,0x0259D,0x02518,0x02598,0x0269A,
	//Shifted
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x00020,0x00021,0x00022,0x00023,0x00024,0x00025,0x00026,0x00027,0x00028,0x00029,0x0002A,0x0002B,0x0002C,0x0002D,0x0002E,0x0002F,
	0x00030,0x00031,0x00032,0x00033,0x00034,0x00035,0x00036,0x00037,0x00038,0x00039,0x0003A,0x0003B,0x0003C,0x0003D,0x0003E,0x0003F,
	0x00040,0x00061,0x00062,0x00063,0x00064,0x00065,0x00066,0x00067,0x00068,0x00069,0x0006A,0x0006B,0x0006C,0x0006D,0x0006E,0x0006F,
	0x00070,0x00071,0x00072,0x00073,0x00074,0x00075,0x00076,0x00077,0x00078,0x00079,0x0007A,0x0005B,0x000A3,0x0005D,0x02191,0x02190,
	0x1FB79,0x00041,0x00042,0x00043,0x00044,0x00045,0x00046,0x00047,0x00048,0x00049,0x0004A,0x0004B,0x0004C,0x0004D,0x0004E,0x0004F,
	0x00050,0x00051,0x00052,0x00053,0x00054,0x00055,0x00056,0x00057,0x00058,0x00059,0x0005A,0x0253C,0x1FB8C,0x02502,0x1FB96,0x1FB98,
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x000A0,0x0258C,0x02584,0x02594,0x02581,0x0258F,0x02592,0x02595,0x1FB8F,0x1FB99,0x1FB87,0x0251C,0x02597,0x02514,0x02510,0x02582,
	0x0250C,0x02534,0x0252C,0x02524,0x0258E,0x0258D,0x1FB88,0x1FB82,0x1FB83,0x02583,0x02713,0x02596,0x0259D,0x02518,0x02598,0x0269A,
	0x1FB79,0x00041,0x00042,0x00043,0x00044,0x00045,0x00046,0x00047,0x00048,0x00049,0x0004A,0x0004B,0x0004C,0x0004D,0x0004E,0x0004F,
	0x00050,0x00051,0x00052,0x00053,0x00054,0x00055,0x00056,0x00057,0x00058,0x00059,0x0005A,0x0253C,0x1FB8C,0x02502,0x1FB96,0x1FB98,
	0x000A0,0x0258C,0x02584,0x02594,0x02581,0x0258F,0x02592,0x02595,0x1FB8F,0x1FB99,0x1FB87,0x0251C,0x02597,0x02514,0x02510,0x02582,
	0x0250C,0x02534,0x0252C,0x02524,0x0258E,0x0258D,0x1FB88,0x1FB82,0x1FB83,0x02583,0x02713,0x02596,0x0259D,0x02518,0x02598,0x0269A,
};

uint32_t trs80[192] = {
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,0x00020,
	0x00020,0x00021,0x00022,0x00023,0x00024,0x00025,0x00026,0x00027,0x00028,0x00029,0x0002A,0x0002B,0x0002C,0x0002D,0x0002E,0x0002F,
	0x00030,0x00031,0x00032,0x00033,0x00034,0x00035,0x00036,0x00037,0x00038,0x00039,0x0003A,0x0003B,0x0003C,0x0003D,0x0003E,0x0003F,
	0x00040,0x00041,0x00042,0x00043,0x00044,0x00045,0x00046,0x00047,0x00048,0x00049,0x0004A,0x0004B,0x0004C,0x0004D,0x0004E,0x0004F,
	0x00050,0x00051,0x00052,0x00053,0x00054,0x00055,0x00056,0x00057,0x00058,0x00059,0x0005A,0x0005B,0x0005C,0x0005D,0x0005E,0x0005F,
	0x00060,0x00061,0x00062,0x00063,0x00064,0x00065,0x00066,0x00067,0x00068,0x00069,0x0006A,0x0006B,0x0006C,0x0006D,0x0006E,0x0006F,
	0x00070,0x00071,0x00072,0x00073,0x00074,0x00075,0x00076,0x00077,0x00078,0x00079,0x0007A,0x0007B,0x0007C,0x0007D,0x0007E,0x000B1,
	0x000A0,0x1FB00,0x1FB01,0x1FB02,0x1FB03,0x1FB04,0x1FB05,0x1FB06,0x1FB07,0x1FB08,0x1FB09,0x1FB0A,0x1FB0B,0x1FB0C,0x1FB0D,0x1FB0E,
	0x1FB0F,0x1FB10,0x1FB11,0x1FB11,0x1FB13,0x0258C,0x1FB14,0x1FB15,0x1FB16,0x1FB17,0x1FB18,0x1FB19,0x1FB1A,0x1FB1B,0x1FB1C,0x1FB1D,
	0x1FB1E,0x1FB1F,0x1FB20,0x1FB21,0x1FB22,0x1FB23,0x1FB24,0x1FB25,0x1FB26,0x1FB27,0x02590,0x1FB28,0x1FB29,0x1FB2A,0x1FB2B,0x1FB2C,
	0x1FB2D,0x1FB2E,0x1FB2F,0x1FB30,0x1FB31,0x1FB32,0x1FB33,0x1FB34,0x1FB35,0x1FB36,0x1FB37,0x1FB38,0x1FB39,0x1FB3A,0x1FB3B,0x02588,
};
#endif //UTF8_EXT_CHARACTER_SETS

//UTF-8 Encoding
// +=========================+==============+==============+==============+==============+==============+==============+==============+==============+
// |uint32_t character (hex) | Byte 0 (bin) | Byte 1 (bin) | Byte 2 (bin) | Byte 3 (bin) | Byte 4 (bin) | Byte 5 (bin) | Byte 6 (bin) | Byte 7 (bin) |
// +=========================|==============+==============+==============+==============+==============+==============+==============+==============+
// |  0000 0000 - 0000 007F  |   0xxxxxxx   |    (null)    |              |              |              |              |              |              |
// |  0000 0080 - 0000 07FF  |   110xxxxx   |   10xxxxxx   |    (null)    |              |              |              |              |              |
// |  0000 0800 - 0000 FFFF  |   1110xxxx   |   10xxxxxx   |   10xxxxxx   |    (null)    |              |              |              |              |
// |  0001 0000 - 001F FFFF  |   11110xxx   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |    (null)    |              |              |              |
// +=========================+==============+==============+==============+==============+==============+==============+==============+==============+
// |  0002 0000 - 03FF FFFF  |   111110xx   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |    (null)    |              |              |
// |  0400 0000 - 7FFF FFFF  |   1111110x   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |    (null)    |              |
// |  8000 0000 - FFFF FFFF  |   11111110   |   100000xx   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |   10xxxxxx   |    (null)    |
// +=========================+==============+==============+==============+==============+==============+==============+==============+==============+
//
// Unicode character are really only valid upto 0x10FFFF, but this function
// encodes any 32bit value.
static char utf8_encoded_character[8];
char* utf8_encode(char* dst, uint32_t character) {
	uint8_t shift;
	uint8_t i;
	
	if( dst == 0 ) {
		dst = utf8_encoded_character;
	}
	
	if( character >= 0x8000000 ) {
		dst[0] = 0b11111110;
		dst[1] = 0b10000000 | ((character>>30)&0b00000011);
		dst[2] = 0b10000000 | ((character>>24)&0b00111111);
		dst[3] = 0b10000000 | ((character>>18)&0b00111111);
		dst[4] = 0b10000000 | ((character>>12)&0b00111111);
		dst[5] = 0b10000000 | ((character>> 6)&0b00111111);
		dst[6] = 0b10000000 | ((character>> 0)&0b00111111);
		dst[7] = 0;
	}
	else if( character >= 0x04000000 ) {
		dst[0] = 0b11111100 | ((character>>30)&0b00000001);
		dst[1] = 0b10000000 | ((character>>24)&0b00111111);
		dst[2] = 0b10000000 | ((character>>18)&0b00111111);
		dst[3] = 0b10000000 | ((character>>12)&0b00111111);
		dst[4] = 0b10000000 | ((character>> 6)&0b00111111);
		dst[5] = 0b10000000 | ((character>> 0)&0b00111111);
		dst[6] = 0;
	}
	else if( character >= 0x00020000 ) {
		dst[0] = 0b11111000 | ((character>>24)&0b00000011);
		dst[1] = 0b10000000 | ((character>>18)&0b00111111);
		dst[2] = 0b10000000 | ((character>>12)&0b00111111);
		dst[3] = 0b10000000 | ((character>> 6)&0b00111111);
		dst[4] = 0b10000000 | ((character>> 0)&0b00111111);
		dst[5] = 0;
	}
	else if( character >= 0x00010000 ) {
		dst[0] = 0b11110000 | ((character>>18)&0b00000111);
		dst[1] = 0b10000000 | ((character>>12)&0b00111111);
		dst[2] = 0b10000000 | ((character>> 6)&0b00111111);
		dst[3] = 0b10000000 | ((character>> 0)&0b00111111);
		dst[4] = 0;
	}
	else if( character >= 0x00000800 ) {
		dst[0] = 0b11100000 | ((character>>12)&0b00001111);
		dst[1] = 0b10000000 | ((character>> 6)&0b00111111);
		dst[2] = 0b10000000 | ((character>> 0)&0b00111111);
		dst[3] = 0;
	}
	else if( character >= 0x00000080 ) {
		dst[0] = 0b11000000 | ((character>> 6)&0b00011111);
		dst[1] = 0b10000000 | ((character>> 0)&0b00111111);
		dst[2] = 0;
	}
	else { // character >= 0 
		dst[0] = 0b00000000 | ((character>> 0)&0b01111111);
		dst[1] = 0;
	}
	return dst;
}

#endif //UTF8_IMPLEMENTATION